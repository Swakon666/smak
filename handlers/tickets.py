# handlers/tickets.py
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from states.ticket_states import TicketPurchaseStates
from keyboards.event_selection import get_event_selection_keyboard
from keyboards.ticket_category import ticket_category_keyboard
from keyboards.main_menu import main_menu_keyboard  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from utils.db_api import (
    get_user_by_telegram_id, 
    get_all_events, 
    get_event_by_title, 
    check_user_balance, 
    deduct_balance,  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    create_ticket, 
    get_ticket_price, 
    get_event_title
)
from utils.qr_generator import generate_qr_code  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
from utils.payment import check_payment_status  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import asyncio
import logging

async def buy_ticket_start(message: types.Message):
    user = await get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register.")
        return
    
    events_keyboard = await get_event_selection_keyboard()
    if not events_keyboard.keyboard[0]:
        await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=events_keyboard)
    await TicketPurchaseStates.waiting_for_event_selection.set()

async def select_event(message: types.Message, state: FSMContext):
    selected_event_title = message.text
    if selected_event_title == "–û—Ç–º–µ–Ω–∞":
        await message.reply("–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.finish()
        return
    
    event = await get_event_by_title(selected_event_title)
    if not event:
        await message.reply("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=await get_event_selection_keyboard())
        return
    
    await state.update_data(event_id=event.id, selected_event_title=selected_event_title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞:", reply_markup=ticket_category_keyboard)
    await TicketPurchaseStates.waiting_for_ticket_category.set()

async def select_ticket_category(message: types.Message, state: FSMContext):
    selected_category = message.text
    if selected_category == "–û—Ç–º–µ–Ω–∞":
        await message.reply("–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.finish()
        return
    
    if selected_category not in ["Standard", "Premium", "VIP"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=ticket_category_keyboard)
        return
    
    user_data = await state.get_data()
    event_id = user_data.get('event_id')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–∞
    ticket_price = await get_ticket_price(event_id, selected_category)
    
    await state.update_data(ticket_category=selected_category, ticket_price=ticket_price)
    
    await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é **{selected_category}**. –¶–µ–Ω–∞: {ticket_price} Smak-–∫–æ–∏–Ω–æ–≤.\n\n"
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞?", 
                        reply_markup=confirmation_keyboard())
    await TicketPurchaseStates.waiting_for_confirmation.set()

async def confirm_purchase(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return
    
    if message.text.lower() == "–Ω–µ—Ç":
        await message.reply("–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.finish()
        return
    
    user_data = await state.get_data()
    event_id = user_data.get('event_id')
    ticket_category = user_data.get('ticket_category')
    ticket_price = user_data.get('ticket_price')
    selected_event_title = user_data.get('selected_event_title')  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    user = await get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register.")
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    has_balance = await check_user_balance(user.id, ticket_price)
    if not has_balance:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=main_menu_keyboard)
        await state.finish()
        return
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    await deduct_balance(user.id, ticket_price)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –±–∏–ª–µ—Ç–∞
    qr_code_path = await generate_qr_code(user.id, event_id, ticket_category)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –±–∏–ª–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    ticket = await create_ticket(user.id, event_id, ticket_category, qr_code_path)
    
    if not ticket:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –±–∏–ª–µ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.", reply_markup=main_menu_keyboard)
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    event_title = await get_event_title(event_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(qr_code_path, 'rb') as qr_file:
        await message.reply_photo(qr_file, caption=f"üéü **–í–∞—à –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:**\n\n"
                                                   f"**–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:** {event_title}\n"
                                                   f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {ticket_category}\n"
                                                   f"**QR-–∫–æ–¥:** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
                                 reply_markup=main_menu_keyboard)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏–æ–±—Ä—ë–ª –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_title}' –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{ticket_category}'.")
    await state.finish()

def confirmation_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–î–∞"))
    keyboard.add(types.KeyboardButton("–ù–µ—Ç"))
    return keyboard

def register_ticket_handlers(dp: Dispatcher):
    dp.register_message_handler(buy_ticket_start, Text(equals="–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"), state='*')
    dp.register_message_handler(select_event, state=TicketPurchaseStates.waiting_for_event_selection, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(select_ticket_category, state=TicketPurchaseStates.waiting_for_ticket_category, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(confirm_purchase, state=TicketPurchaseStates.waiting_for_confirmation, content_types=types.ContentTypes.TEXT)
